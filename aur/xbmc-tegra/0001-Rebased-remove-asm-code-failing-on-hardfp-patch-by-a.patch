From 864ea968ce5817e7e813c174b27061187b8b1c33 Mon Sep 17 00:00:00 2001
From: Marko Saukko <marko.saukko@cybercom.com>
Date: Thu, 19 Jan 2012 13:13:57 +0200
Subject: [PATCH] Rebased: remove asm code failing on hardfp patch by arfoll.

Signed-off-by: Marko Saukko <marko.saukko@cybercom.com>
---
 xbmc/utils/MathUtils.h |   40 +---------------------------------------
 1 files changed, 1 insertions(+), 39 deletions(-)

diff --git a/xbmc/utils/MathUtils.h b/xbmc/utils/MathUtils.h
index 47517b5..7b382b2 100644
--- a/xbmc/utils/MathUtils.h
+++ b/xbmc/utils/MathUtils.h
@@ -63,46 +63,8 @@ namespace MathUtils
       sar i, 1
     }
 #else
-#if defined(__powerpc__) || defined(__ppc__)
+#if defined(__powerpc__) || defined(__ppc__) || defined(__arm__)
     i = floor(x + round_to_nearest);
-#elif defined(__arm__)
-    // From 'ARMÂ®v7-M Architecture Reference Manual' page A7-569:
-    //  "The floating-point to integer operation (vcvt) [normally] uses the Round towards Zero rounding mode"
-    // Because of this...we must use some less-than-straightforward logic to perform this operation without
-    //  changing the rounding mode flags
-
-    /* The assembly below implements the following logic:
-     if (x < 0)
-       inc = -0.5f
-     else
-       inc = 0.5f
-     int_val = trunc(x+inc);
-     err = x - int_val;
-     if (err == 0.5f)
-       int_val++;
-     return int_val;
-     */
-
-    __asm__ __volatile__ (
-                          "vmov.F64 d1,%[rnd_val]      \n\t" // Copy round_to_nearest into a working register (d1 = 0.5)
-                          "fcmpezd %P[value]           \n\t" // Check value against zero (value == 0?)
-                          "fmstat                      \n\t" // Copy the floating-point status flags into the general-purpose status flags
-                          "it mi                       \n\t"
-                          "vnegmi.F64 d1, d1           \n\t" // if N-flag is set, negate round_to_nearest (if (value < 0) d1 = -1 * d1)
-                          "vadd.F64 d1,%P[value],d1    \n\t" // Add round_to_nearest to value, store result in working register (d1 += value)
-                          "vcvt.S32.F64 s3,d1          \n\t" // Truncate(round towards zero) (s3 = (int)d1)
-                          "vmov %[result],s3           \n\t" // Store the integer result in a general-purpose register (result = s3)
-                          "vcvt.F64.S32 d1,s3          \n\t" // Convert back to floating-point (d1 = (double)s3)
-                          "vsub.F64 d1,%P[value],d1    \n\t" // Calculate the error (d1 = value - d1)
-                          "vmov.F64 d2,%[rnd_val]      \n\t" // d2 = 0.5;
-                          "fcmped d1, d2               \n\t" // (d1 == 0.5?)
-                          "fmstat                      \n\t" // Copy the floating-point status flags into the general-purpose status flags
-                          "it eq                       \n\t"
-                          "addeq %[result],#1          \n\t" // (if (d1 == d2) result++;)
-                          : [result] "=r"(i)                                  // Outputs
-                          : [rnd_val] "Dv" (round_to_nearest), [value] "w"(x) // Inputs
-                          : "d1", "d2", "s3"                                  // Clobbers
-                          );
 #else
     __asm__ __volatile__ (
                           "fadd %%st\n\t"
-- 
1.7.6.4

